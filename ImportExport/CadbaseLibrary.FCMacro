#***************************************************************************
#*                                                                         *
#*   Copyright (c) 2022 mnnxp <in@cadbase.rs>              *
#*                                                                         *
#*   This program is free software; you can redistribute it and/or modify  *
#*   it under the terms of the GNU Lesser General Public License (LGPL)    *
#*   as published by the Free Software Foundation; either version 2 of     *
#*   the License, or (at your option) any later version.                   *
#*   for detail see the LICENCE text file.                                 *
#*                                                                         *
#*   This program is distributed in the hope that it will be useful,       *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#*   GNU Library General Public License for more details.                  *
#*                                                                         *
#*   You should have received a copy of the GNU Library General Public     *
#*   License along with this program; if not, write to the Free Software   *
#*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  *
#*   USA                                                                   *
#*                                                                         *
#***************************************************************************

'''
Macro to integrate FreeCAD with CADBase

The macro is designed to load and use components (parts) from CADBase in the FreeCAD interface.

For a component modification, sets of files for various CAD systems are loaded. Thus, only FreeCAD set files are downloaded, without downloading documentation and other information on the component.

INSTALLATION

- in menu Tools select Addon Manager Select the Macros tab find CADBaseLibrary in the list and click Install
After it is installed, it will be available in the macros menu.
- create an account on the platform [CADBase](https://cadbase.rs/#/register) for yourself
- open "Macro" in the ToolBar
- select "Macros..." and choose the "CadbaseLibrary.FCMacro" macro and "execute"
- then you will be prompted to select a folder for data (where the files from the CADBase storage will be loaded)
A widget "CADBase Library" will be generated in a separate window.
- choose tab "Options" in window of the macro
- click "Settings" button
- in window that opens, you need to set the username and password to gain access to CADBase
- after press the "OK" button and wait for the token to be received

USAGE

- for update access token need in the "CADBase library" window, in the "Options" tab, click the "Settings" button, in the "CADBase library configuration" window that opens, you need to set the username/password to gain access to CADBase and wait for a new token to be received after pressing the "OK" button
- add target components to bookmarks (favorites) on the CADBase site. In FreeCAD will only display components that the user has bookmarked on CADBase, as well as those that have been previously downloaded
- clicking "Update from CADBase" only updates the list of components from bookmarks active user, without downloading component modifications and files
- double-clicking on a component folder to get component's modifications
- getting files of a fileset for FreeCAD occurs after double-clicking on the modification folder
- double-clicking on file for use it

COMMUNICATION

If you want to share a tip, get involved, report a problem, or anything else, please create a issue or post in this FreeCAD forum thread:
https://forum.freecadweb.org/viewtopic.php?f=22&t=69389
'''

from __future__ import print_function

__Title__= 'CADBase Library'
__Name__ = 'CadbaseLibrary'
__Comment__ = 'This CadbaseLibrary macro to use components (parts) from CADBase in app.'
__Author__ = 'mnnxp'
__Date__ = '2022-11-11'
__Version__ = '0.1.2'
__License__ = 'LGPL-3.0-or-later'
__Web__ = 'https://cadbase.rs'
__Wiki__ = 'https://github.com/FreeCAD/FreeCAD-macros/blob/master/ImportExport/CadbaseLibrary/README.md'
__Icon__ = 'CadbaseLibrary.svg'
__Help__ = 'Requires CADBase account to correct use the macro.'
__Status__ = 'Stable'
__Requires__ = 'FreeCAD >= 0.19'
__Communication__ = 'https://forum.freecadweb.org/viewtopic.php?f=22&t=69389'
__Files__ = 'CadbaseLibrary/README.md,CadbaseLibrary/cadbase_library.ui,CadbaseLibrary/cadbase_library_config.ui,CadbaseLibrary.svg'

import zipfile
import tempfile
import pathlib
from types import SimpleNamespace
from PySide import QtGui, QtCore
import Part
import FreeCAD as app
import FreeCADGui as gui
from CadbaseLibrary.CdbsEvn import g_param, g_cdbs_api, g_library_path
from CadbaseLibrary.CdbsEvn import g_ui_file, g_ui_file_config
from CadbaseLibrary.CdbsAuth import CdbsAuth
from CadbaseLibrary.CdbsApi import CdbsApi
from CadbaseLibrary.QueriesApi import QueriesApi
import CadbaseLibrary.DataHandler as DataHandler

try:
    QtCore.QTextCodec.setCodecForTr(QTextCodec.codecForName('UTF-8'))
except:
    pass # Will fallback to Latin-1

class ExpFileSystemModel(QtGui.QFileSystemModel):
    ''' a custom QFileSystemModel that displays freecad file icons '''

    def __init__(self):
        QtGui.QFileSystemModel.__init__(self)

    def data(self, index, role):
        if index.column() == 0 and role == QtCore.Qt.DecorationRole:
            if index.data().lower().endswith('.fcstd'):
                return QtGui.QIcon(':icons/freecad-doc.png')
            elif index.data().lower() == 'private':
                return QtGui.QIcon.fromTheme('folder-lock')
        return super(ExpFileSystemModel, self).data(index, role)


class ExpCdbsWidget(QtGui.QDockWidget):
    ''' a library explorer CADBase widget '''

    def __init__(self, parent=None):
        QtGui.QDockWidget.__init__(self)
        self.setObjectName('CADBaseLibrary')
        self.form = gui.PySideUic.loadUi(g_ui_file)

        self.dirmodel = ExpFileSystemModel()
        self.dirmodel.setRootPath(g_library_path)
        self.dirmodel.setNameFilters([
            '*.fcstd',
            '*.FcStd',
            '*.FCSTD',
            '*.stp',
            '*.STP',
            '*.step',
            '*.STEP',
            '*.brp',
            '*.BRP',
            '*.brep',
            '*.BREP',
            ])
        self.dirmodel.setNameFilterDisables(0)
        self.form.folder.setModel(self.dirmodel)
        self.form.folder.hideColumn(1)
        self.form.folder.hideColumn(2)
        self.form.folder.hideColumn(3)
        self.form.folder.setRootIndex(self.dirmodel.index(g_library_path))

        self.previewframe = self.form.toolBox.widget(0)
        self.previewframe.preview = \
            self.previewframe.findChild(QtGui.QLabel, 'preview')
        self.optbuttons = self.form.toolBox.widget(1)
        self.optbuttons.updatebutton = \
            self.optbuttons.findChild(QtGui.QToolButton, 'updatebutton')
        self.optbuttons.configbutton = \
            self.optbuttons.findChild(QtGui.QToolButton, 'configbutton')
        self._connect_widgets()
        self.setWidget(self.form)


    def _connect_widgets(self):
        self.form.folder.clicked.connect(self.clicked)
        self.form.folder.doubleClicked.connect(self.doubleclicked)
        self.optbuttons.updatebutton.clicked.connect(self.updatelibrary)
        self.optbuttons.configbutton.clicked.connect(self.setconfig)

    def clicked(self, index):
        path = self.dirmodel.filePath(index)
        if path.lower().endswith('.fcstd'):
            try:
                zfile = zipfile.ZipFile(path)
                files = zfile.namelist()
                # check for meta-file if it's really a FreeCAD document
                if files[0] == 'Document.xml':
                    image = 'thumbnails/Thumbnail.png'
                    if image in files:
                        image = zfile.read(image)
                        thumbfile = tempfile.mkstemp(suffix='.png')[1]
                        thumb = open(thumbfile, 'wb')
                        thumb.write(image)
                        thumb.close()
                        im = QtGui.QPixmap(thumbfile)
                        self.previewframe.preview.setPixmap(im)
                        return
            except Exception as e:
                app.Console.PrintError(f'{e}: {path}\n')
        self.previewframe.preview.clear()

    def doubleclicked(self, index):
        clck_path = pathlib.Path(self.dirmodel.filePath(index))

        if clck_path.is_dir():
            if g_param.GetString('auth-token'):
                component_file = clck_path / 'component'
                if component_file.exists():
                    component_data = DataHandler.read_object_info(component_file, 'component')
                    CdbsApi(QueriesApi.component_modifications(component_data.uuid))
                    update_component(g_library_path, clck_path)
                modification_file = clck_path / 'modification'
                if modification_file.exists():
                    modification_data = DataHandler.read_object_info(modification_file, 'modification')
                    CdbsApi(QueriesApi.target_fileset(modification_data.uuid))
                    update_component_modificaion(g_library_path, clck_path,
                            modification_data.uuid)
            else:
                app.Console.PrintError('Token not found\n')
        else:
            str_path = str(clck_path.resolve())
            str_path_l = str_path.lower()
            try:
                if str_path_l.endswith('.stp') \
                    or str_path_l.endswith('.step') \
                    or str_path_l.endswith('.brp') \
                    or str_path_l.endswith('.brep'):
                    Part.show(Part.read(str_path))
                elif str_path_l.endswith('.fcstd'):
                    gui.activeDocument().mergeProject(str_path)
            except Exception as e:
                app.Console.PrintError(f'{e}\n')
            gui.SendMsgToActiveView('ViewFit')


    def updatelibrary(self):
        CdbsApi(QueriesApi.fav_components())
        update_components_list(g_library_path)

    def setconfig(self):
        ConfigDialog(parent=self)

class ConfigDialog(QtGui.QDialog):
    ''' a dialog for macro settings and get access token '''

    def __init__(self, parent=None):
        QtGui.QDialog.__init__(self, parent)
        self.setObjectName('CADBaseLibraryConfig')
        self.form = gui.PySideUic.loadUi(g_ui_file_config)
        self._connect_widgets()
        self.form.show()
        self.form.lineEdit_3.setText(g_param.GetString('destination',''))

    def _connect_widgets(self):
        self.form.buttonBox.accepted.connect(self.accept)
        self.form.buttonBox.rejected.connect(self.reject)
        self.form.pushButton.clicked.connect(self.setdefaulturl)
        self.form.pushButton_3.clicked.connect(self.changepath)

    def setdefaulturl(self):
        self.form.lineEdit.setText(g_cdbs_api)

    def changepath(self):
        g_library_path = g_param.GetString('destination','')
        np = QtGui.QFileDialog.getExistingDirectory(
            self,
            'Local location of your existing CADBase library',
            g_library_path
            )
        if np:
            self.form.lineEdit_3.setText(np)

    def reject(self):
        app.Console.PrintMessage('Changes not accepted\n')
        self.form.close()

    def accept(self):
        if self.form.lineEdit.text():
            g_param.SetString('api-url',self.form.lineEdit.text())
        if self.form.lineEdit_3.text() != g_param.GetString('destination'):
            g_param.SetString('destination',self.form.lineEdit_3.text())
            app.Console.PrintWarning('Please restart FreeCAD\n')
        if self.form.lineEdit_2.text() and self.form.lineEdit_4.text():
            username = self.form.lineEdit_2.text()
            password = self.form.lineEdit_4.text()
            CdbsAuth(username, password)
        app.Console.PrintMessage('Configuration updated\n')
        self.form.close()


if QtCore.QDir(g_library_path).exists():
    m = gui.getMainWindow()
    w = m.findChild(QtGui.QDockWidget,'CADBaseLibrary')
    if w and hasattr(w, 'isVisible'):
        if w.isVisible():
            w.hide()
        else:
            w.show()
    else:
        m.addDockWidget(QtCore.Qt.RightDockWidgetArea, ExpCdbsWidget())
else:
    app.Console.PrintWarning(f'Library path "{g_library_path}" not found.\n')


def update_components_list(g_library_path):
    data = DataHandler.parsing_gpl()
    if isinstance(data, SimpleNamespace):
        if data.components:
            for component in data.components:
                app.Console.PrintLog(component.uuid + '\n')
                new_dir = pathlib.Path(g_library_path) \
                    / f'{component.name} (from  {component.ownerUser.username})'
                DataHandler.create_object_path(new_dir, component, 'component')
        else:
            app.Console.PrintWarning("You don't have favorite components\n")
    app.Console.PrintMessage('Component list update finished\n')


def update_component(g_library_path, component_path):
    data = DataHandler.parsing_gpl()
    if isinstance(data, SimpleNamespace):
        if data.componentModifications:
            for modification in data.componentModifications:
                new_dir = pathlib.Path(component_path)
                new_dir /= modification.modificationName
                DataHandler.create_object_path(new_dir, modification, 'modification')
        else:
            app.Console.PrintWarning('No modifications for the component\n')
    app.Console.PrintMessage('Updated the list of component modifications\n')


def update_component_modificaion(g_library_path, modification_path,
                               modification_uuid):
    data = DataHandler.parsing_gpl()
    if isinstance(data, SimpleNamespace):
        if data.componentModificationFilesets:
            CdbsApi(QueriesApi.fileset_files(data.componentModificationFilesets[0].uuid))
            data = DataHandler.parsing_gpl()
            if isinstance(data, SimpleNamespace):
                if data.componentModificationFilesetFiles:
                    urls = []
                    fns = []

                    for file_of_fileset in \
                        data.componentModificationFilesetFiles:
                        urls.append(file_of_fileset.downloadUrl)
                        fns.append(pathlib.Path(modification_path)
                                   / file_of_fileset.filename)

                    inputs = zip(urls, fns)
                    DataHandler.download_parallel(inputs)
                    app.Console.PrintMessage(f'Download is completed ({len(urls)} file(s))\n')
                else:
                    app.Console.PrintWarning('No files in fileset\n')
        else:
            app.Console.PrintWarning('Fileset not found for FreeCAD\n')
    app.Console.PrintMessage('Updated component modification files\n')
